{"data":{"markdownRemark":{"html":"<p>It's 1996.  John Travolta and Christian Slater are at the height of their powers.  What's better than a cheesy action flick?  Okay, this post isn't about <a href=\"https://www.imdb.com/title/tt0115759/\">Broken Arrow</a>... it's another post about JavaScript!</p>\n<h2>Arrow Functions</h2>\n<p>The old school of the old school (how we used to define functions back in the day):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The new hotness for functions that ES2015 gave us:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// You must declare your new arrow function as a variable: let add</span>\n<span class=\"token comment\">// Parameters of function are defined next: = (a,b)</span>\n<span class=\"token comment\">// Arrow function is almost equivalent to function: =></span>\n<span class=\"token comment\">// No return statement necessary if only a single line: a + b;</span></code></pre></div>\n<p>Arrow functions are <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\">syntactic sugar</a>, making function declaration more concise.</p>\n<p>There are some important catches or gotchas to remember with arrow functions though:</p>\n<ul>\n<li>Arrow functions do NOT get their own \"this\" keyword</li>\n<li>Within an arrow function, \"this\" is the enclosing context you find the arrow function in</li>\n<li>For the above reason, it's a best practice to never use arrow functions as methods on objects</li>\n</ul>\n<h2>Default Parameters</h2>\n<p>Default parameters are commonly found in other languages, but for JavaScript it's a new trick.  They help save on extra code in a function typically used to handle instances where a function is called without parameters.</p>\n<p>The old school rudimentary way to handle undefined parameters being passed:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The new hotness that saves a lot of code duplication:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what happens now?  Well, if you call add() without parameters, now you get 0 instead of Not a Number (NaN).  As you can see, this function just got a lot cleaner and it still protects against undefined parameters being called!</p>","timeToRead":1,"frontmatter":{"title":"Broken Arrows, Default Parameters","date":"December 05, 2018","tags":["learn","javascript","es2015"]}}},"pageContext":{"slug":"/2018/12/05-broken-arrows-default-parameters/","prev":"/2018/12/04-variety-in-javascript/","next":"/2018/12/06-getting-some-closure-on-js/"}}