{"data":{"markdownRemark":{"html":"<h2>Async</h2>\n<p>Async functions are a special type of function that returns a Promise.  They've been designed to make Promises easier to work with.  Imagine they're kind of like all the new String methods, except since Promises are so new, they're coming about in ES2017, instead of ES2015.</p>\n<p>I think they're a sign of the language's new speed of evolution.</p>\n<p>Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFlyingMoonModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"DS-1 Orbital Battle Station\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFlyingMoonModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// returns a promise:</span>\n<span class=\"token comment\">// Promise {&lt;resolved>: \"DS-1 Orbital Battle Station\"}</span>\n\n<span class=\"token function\">getFlyingMoonModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>model <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// DS-1 Orbital Battle Station</span></code></pre></div>\n<p>But every Death Star needs its Luke Skywalker, and Await is the Skywalker to Async's Death Star!\n(Geez, I'm really sorry about the puns.  It's very early morning, and I can't help myself.)</p>\n<h2>Await</h2>\n<p>This is a reserved keyword that can only be used inside of an async function.  You can think of it like a big pause button for asynchronous code, because it <em>pauses</em> the execution of the async function and waits for the Promise to resolve.  </p>\n<p>It resumes once the Promise has been resolved, returning the value of that Promise.  Now, we're cooking with proton torpedos!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke manuevers into attack position!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Firing proton torpedos at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> EXPLODES!`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// {name: \"Death Star\", model: \"DS-1 Orbital Battle Station\", manufacturer: \"Imperial Department of Military Research, Sienar Fleet Systems\", cost_in_credits: \"1000000000000\", length: \"120000\", â€¦}</span>\n<span class=\"token comment\">// Firing proton torpedos at Death Star!</span>\n<span class=\"token comment\">// DS-1 Orbital Battle Station EXPLODES!</span></code></pre></div>\n<p>You can do the same thing on an Object's methods as well, using the new shorthand notation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> shipOfLuke <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"unnamed\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke manuevers into attack position!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Firing proton torpedos at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> EXPLODES!`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And you probably already guessed this, but it's easy to extend this to a Class as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ship</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> manuevers into attack position!`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> fires proton torpedos at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> EXPLODES!`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> lukesFighter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ship</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Wing\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luke\"</span><span class=\"token punctuation\">)</span>\nlukesFighter<span class=\"token punctuation\">.</span><span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// {name: \"Death Star\", model: \"DS-1 Orbital Battle Station\", manufacturer: \"Imperial Department of Military Research, Sienar Fleet Systems\", cost_in_credits: \"1000000000000\", length: \"120000\", â€¦}</span>\n<span class=\"token comment\">// X-Wing fires proton torpedos at Death Star!</span>\n<span class=\"token comment\">// DS-1 Orbital Battle Station EXPLODES!</span></code></pre></div>\n<p>But what happens when Luke misses?  It's possible...</p>\n<h2>Handling Errors</h2>\n<p>You have to remember to handle the failure state of a Promise as well.  You can use a try/catch statement to handle errors.</p>\n<p>Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke manuevers into attack position!'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke fires his laser cannons!!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Luke hits </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> with a laser blast!`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke misses!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Success case (the try block)</span>\n<span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Luke fires his laser cannons!!</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// {name: \"Death Star\", model: \"DS-1 Orbital Battle Station\", manufacturer: \"Imperial Department of Military Research, Sienar Fleet Systems\", cost_in_credits: \"1000000000000\", length: \"120000\", â€¦}</span>\n<span class=\"token comment\">// Luke hits Death Star with a laser blast!</span>\n\n<span class=\"token comment\">// Failure case (the catch block)</span>\n<span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span>XMLDocument<span class=\"token punctuation\">)</span> <span class=\"token comment\">// invalid input for this API</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Luke fires his laser cannons!!</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// GET https://swapi.co/api/starships/function%20XMLDocument%28%29%20%7B%20%5Bnative%20code%5D%20%7D/ 404</span>\n<span class=\"token comment\">// Luke misses!</span></code></pre></div>\n<h2>Long Response Promises and Performance</h2>\n<p>In our metaphor, imagine that some ships take longer to blow up than others.  There's no reason why a starship pilot shouldn't be able to move on to the next target, while his proton torpedos travel to the first, right?  </p>\n<p>Let's see a really slow example that waits for each request to resolve before moving on to the next one:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Luke manuevers into attack position!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Luke hits </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> with a laser blast!`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// destroyShip(9, 10, 11)</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// Luke hits Death Star with a laser blast!</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Luke hits Millennium Falcon with a laser blast!</span>\n<span class=\"token comment\">// Luke manuevers into attack position!</span>\n<span class=\"token comment\">// Luke hits Y-wing with a laser blast!</span></code></pre></div>\n<p>This was really, really slow.  It took maybe 10 seconds total, when I tested it in my Chrome console.</p>\n<p>And now, what if we make these requests in parallel?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroyShip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> attackShip1 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://swapi.co/api/starships/9'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> attackShip2 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://swapi.co/api/starships/10'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> attackShip3 <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://swapi.co/api/starships/11'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> ship1Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> attackShip1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> ship2Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> attackShip2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> ship3Result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> attackShip3<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ship1Result<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ship2Result<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ship3Result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// destroyShip()</span>\n<span class=\"token comment\">// Promise {&lt;pending>}</span>\n<span class=\"token comment\">// {name: \"Death Star\", model: \"DS-1 Orbital Battle Station\", manufacturer: \"Imperial Department of Military Research, Sienar Fleet Systems\", cost_in_credits: \"1000000000000\", length: \"120000\", â€¦}</span>\n<span class=\"token comment\">// {name: \"Millennium Falcon\", model: \"YT-1300 light freighter\", manufacturer: \"Corellian Engineering Corporation\", cost_in_credits: \"100000\", length: \"34.37\", â€¦}</span>\n<span class=\"token comment\">// {name: \"Y-wing\", model: \"BTL Y-wing\", manufacturer: \"Koensayr Manufacturing\", cost_in_credits: \"134999\", length: \"14\", â€¦}</span></code></pre></div>\n<p>That took no time at all!  Maybe 1 second?  The benefits of making parallel calls!</p>\n<p>But what if we want to make something more dynamic like our original function that can accept ships?</p>\n<h2>Await with Promise.all</h2>\n<p>Let's get crazy.  Like... Luke Skywalker taking on the Death Star crazy!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroyShips</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> shipList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// Assemble an Array of Promises, but make all requests in parallel</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shipList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://swapi.co/api/starships/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Wait for an Array of Promises to resolve</span>\n    <span class=\"token keyword\">var</span> targetList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>shipList<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Print out the results after Promise.all finishes</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Following targets destroyed: \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> target <span class=\"token keyword\">of</span> targetList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">destroyShips</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Following targets destroyed: </span>\n<span class=\"token comment\">// {name: \"Death Star\", model: \"DS-1 Orbital Battle Station\", manufacturer: \"Imperial Department of Military Research, Sienar Fleet Systems\", cost_in_credits: \"1000000000000\", length: \"120000\", â€¦}</span>\n<span class=\"token comment\">// {name: \"Millennium Falcon\", model: \"YT-1300 light freighter\", manufacturer: \"Corellian Engineering Corporation\", cost_in_credits: \"100000\", length: \"34.37\", â€¦}</span>\n<span class=\"token comment\">// {name: \"Y-wing\", model: \"BTL Y-wing\", manufacturer: \"Koensayr Manufacturing\", cost_in_credits: \"134999\", length: \"14\", â€¦}</span></code></pre></div>\n<p>That happened in maybe 1-2 seconds?  That was awesome!</p>\n<p>The nice part about this kind of pattern is that even though the code is async, it's still easy to read.</p>","timeToRead":5,"frontmatter":{"title":"Async Your Battleship with ES2017","date":"December 25, 2018","tags":["learn","javascript","es2017"]}}},"pageContext":{"slug":"/2018/12/25-async-your-battleship-with-ES-2017/","prev":"/2018/12/25-es2017-async-your-battleship/","next":"/2018/12/26-es2017-object-spread-and-rest/"}}