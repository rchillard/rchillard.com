{"data":{"markdownRemark":{"html":"<h2>Maps to New Treasure</h2>\n<p>Despite the title, I'm not a pirate on the high seas here.  What is a Map?\nA Map is a collection of key-value pairs where the keys do not have to be strings.  In other languages, this is often called a hash map.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Use the 'new' keyword to create a Map</span>\n<span class=\"token keyword\">var</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add new entries via the .set function</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Frog'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a boolean'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shoelaces'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a string'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Delete a key-value pair</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shoelaces'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Easily retrieve the size </span>\nmyMap<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// Retrieve values by their keys</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Frog'</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'a boolean'</span></code></pre></div>\n<p>Keys can actually be any type, including arrays and objects.  This makes Maps very powerful!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arrayKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>arrayKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> objectKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>objectKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>arrayKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>objectKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {a:1}</span></code></pre></div>\n<p>To demonstrate the ease of iteration over a map see the example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 'Frog'</span>\n<span class=\"token comment\">// 'a boolean'</span>\n<span class=\"token comment\">// [1,2,3,4,5]</span>\n<span class=\"token comment\">// {a:1}</span>\n\n<span class=\"token comment\">// You can also use the Symbol.iterator or for...of loop</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// MapIterator of values</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// MapIterator of keys</span>\n\n<span class=\"token comment\">// Example of a for...of loop to traverse values</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> value <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Why use Maps?</h2>\n<ul>\n<li>Finding the size is easy</li>\n<li>Keys can be any data types</li>\n<li>Iterating over keys and values is very easy</li>\n</ul>\n<h2>When do you use Maps?</h2>\n<ul>\n<li>If you need to look up keys dynamically (they are not hard coded)</li>\n<li>If you need keys that are not strings</li>\n<li>If you are frequently adding or removing key/value pairs</li>\n<li>If you are operating on multiple keys at a time</li>\n</ul>\n<h2>WeakMap</h2>\n<ul>\n<li>Similar to a Map except all the keys must be objects</li>\n<li>Values in a WeakMap can lose their references</li>\n<li>More performant than Maps but can not be iterated over</li>\n</ul>\n<h1>Super Set Your JavaScript</h1>\n<p>You know we're not exercising here.  No, I'm talking about the new Set data structure in JavaScript.  Sets are common in other languages (like my old school Java) and this follows a pattern that I have noticed in ES2015.  It increasingly feels like ES2015 is bringing JavaScript up to parity with other languages.</p>\n<h2>Set Characteristics</h2>\n<ul>\n<li>All values in a set are unique</li>\n<li>Any type of value can exist in a set</li>\n<li>Created using the 'new' keyword</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span>\n<span class=\"token keyword\">var</span> myOtherSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5]</span>\n\n<span class=\"token comment\">// Add allows you to include entries</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1}</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1, 2}</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {1, 2}</span>\n<span class=\"token comment\">// Set enforces unique values so does not accept 2nd '2'</span>\n\n<span class=\"token comment\">// Easily see the size of a Set</span>\nmySet<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// Determine if value exists</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Delete a value</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmySet<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// 1</span>\n\nmyOtherSet<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token comment\">// function(){}...</span></code></pre></div>\n<h2>WeakSet</h2>\n<ul>\n<li>All values must be objects</li>\n<li>Values in a WeakSet can lose their references</li>\n<li>More performant than Sets but can not be iterated over</li>\n</ul>","timeToRead":2,"frontmatter":{"title":"Shiny New Data Structures: Maps and Sets","date":"December 15, 2018","tags":["learn","javascript","es2015"]}}},"pageContext":{"slug":"/2018/12/15-shiny-new-data-structures/","prev":"/2018/12/14-keyword-super-in-javascript/","next":"/2018/12/16-super-set-your-javascript/"}}