{"data":{"markdownRemark":{"html":"<p>Continuing on our theme of making it easier to work with arrays in ES2015:</p>\n<h1>Rest Operator</h1>\n<p>I imagine JavaScript's Rest as being a tavern for wayward coders who need to pause for some respite.</p>\n<p>The rest operator collects the remaining arguments of a function and exposes them as an array that's available within a function.  This is useful for functions where there are an undetermined number of parameters being passed, but you still need to handle those parameters within the function.  Here's an example in code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printCast</span><span class=\"token punctuation\">(</span>director<span class=\"token punctuation\">,</span>writer<span class=\"token punctuation\">,</span>producer<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>cast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>director<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>producer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printCast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Christopher Nolan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jonathan Nolan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Emma Thomas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Matthew McConaughey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Anne Hathaway\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jessica Chastain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Christopher Nolan</span>\n<span class=\"token comment\">// Jonathan Nolan</span>\n<span class=\"token comment\">// Emma Thomas</span>\n<span class=\"token comment\">// [\"Matthew McConaughey\", \"Anne Hathaway\", \"Jessica Chastain\"]</span></code></pre></div>\n<p>Can you guess what movie?  It's one of <a href=\"https://www.imdb.com/title/tt0816692/\">my favorites</a>.</p>\n<p>Here are some important rules to keep in mind when using the rest operator:</p>\n<ul>\n<li>It always returns an array</li>\n<li>It's accessed within the function by referencing the name directly (not the ...)</li>\n<li>The '...' is only considered the rest operator when used with parameters in a function</li>\n</ul>\n<h1>Spread Operator</h1>\n<p>I imagine JavaScript's Spread as being some kind of funky, really strange jam... something akin to <a href=\"https://en.wikipedia.org/wiki/Marmite\">marmite</a>.</p>\n<p>Spread operator takes an array and 'spreads' these values out into a comma separated value.  This is useful when you have an array, but what you are working with expects comma separated values.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> keyCast <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Christopher Nolan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jonathan Nolan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Emma Thomas\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printExecutiveCast</span><span class=\"token punctuation\">(</span>director<span class=\"token punctuation\">,</span> writer<span class=\"token punctuation\">,</span> producer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Director: \"</span> <span class=\"token operator\">+</span> director<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writer: \"</span> <span class=\"token operator\">+</span> writer<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Producer: \"</span> <span class=\"token operator\">+</span> producer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Without using the spread operator, this function:</span>\n<span class=\"token function\">printExecutiveCast</span><span class=\"token punctuation\">(</span>keyCast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Director: Christopher Nolan,Jonathan Nolan,Emma Thomas</span>\n<span class=\"token comment\">// Writer: undefined</span>\n<span class=\"token comment\">// Producer: undefined</span>\n\n<span class=\"token comment\">// Now, with using the spread operator, this function:</span>\n\n<span class=\"token function\">printExecutiveCast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>keyCast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Director: Christopher Nolan</span>\n<span class=\"token comment\">// Writer: Jonathan Nolan</span>\n<span class=\"token comment\">// Producer: Emma Thomas</span></code></pre></div>\n<h1>Destructuring my Codelife</h1>\n<p>Destructuring is a new concept for me.  It means extracting values from data stored in objects and arrays.  I think it's best to illustrate with an example.  We'll start with objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fido\"</span><span class=\"token punctuation\">,</span>\n    breed<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Labrador\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> dogName <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dogBreed <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>breed<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is manually extracting values from an object and storing them in different variables.  As you can see from the above, this could get extremely verbose if there were a lot of properties on the dog object.  Destructuring allows you to unpack properties from an object.  Here's destructuring in action:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fido\"</span><span class=\"token punctuation\">,</span>\n    breed<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Labrador\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">;</span>\nname <span class=\"token comment\">// \"Fido\"</span>\nbreed <span class=\"token comment\">// \"Labrador\"</span></code></pre></div>\n<p>Here's an example if you want to reassign these variables into new names at the same time, which can really help with handling:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Spike\"</span><span class=\"token punctuation\">,</span>\n    breed<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rottweiler\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span>nameOfDog<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">:</span>breedOfDog <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">;</span>\nnameOfDog <span class=\"token comment\">// \"Spike\"</span>\nbreedOfDog <span class=\"token comment\">// \"Rottweiler\"</span></code></pre></div>\n<p>Destructuring allows us to extract properties from objects and store them in distinct variables.</p>\n<h2>Destructuring Arrays</h2>\n<p>Handling individual array values could be really clunky in the old west:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fido\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Spike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lady\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> firstDog <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> secondDog <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> thirdDog <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nfirstDog <span class=\"token comment\">// Fido</span>\nsecondDog <span class=\"token comment\">// Spike</span>\nthirdDog <span class=\"token comment\">// Lady</span></code></pre></div>\n<p>With our new destructuring capabilities, we have access to much more succinct syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fido\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Spike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lady\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>firstDog<span class=\"token punctuation\">,</span> secondDog<span class=\"token punctuation\">,</span> thirdDog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">;</span>\n\nfirstDog <span class=\"token comment\">// Fido</span>\nsecondDog <span class=\"token comment\">// Spike</span>\nthirdDog <span class=\"token comment\">// Lady</span></code></pre></div>\n<h3>Swapping Values</h3>\n<p>Old school:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>New school:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"New Operators: Rest, Spread, and Destructuring","date":"December 08, 2018","tags":["learn","javascript","es2015"]}}},"pageContext":{"slug":"/2018/12/08-new-operators-in-es2015/","prev":"/2018/12/07-easier-arrays-in-es2015/","next":"/2018/12/09-javascripts-spread/"}}