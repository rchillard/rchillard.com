{"data":{"markdownRemark":{"html":"<p>For years, I have found myself using framework and library interchangeabley.  That's just wrong.  </p>\n<p>I never knew it until now, but these two are very different.  The key sits in understanding a scary concept called inversion of control.  Here's the textbook definition:</p>\n<blockquote>\n<p>In software engineering, inversion of control (IoC) is a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.</p>\n</blockquote>\n<p>Here's a succinct breakdown</p>","timeToRead":1,"frontmatter":{"title":"Framework vs. Library","date":"Nov 24, 2018","tags":["learn"]}}},"pageContext":{"slug":"/2018/11-24-framework-vs-library/","prev":"/2018/11-23-restful-routing-reference/","next":null}}