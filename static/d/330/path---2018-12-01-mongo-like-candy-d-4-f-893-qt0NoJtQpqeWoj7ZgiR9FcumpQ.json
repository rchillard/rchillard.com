{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.youtube.com/watch?v=P8ciVBQixpU\">Mongo like candy</a>, but MongoDB likes unstructured data.  I am diving into MongoDB.  Let's hope it doesn't blow up in my face like the infamous candygram.  As a refresher, MongoDB is a non-relation (NoSQL) database.  There are many types of these that were covered in a previous post, but this one is a document-based data store.</p>\n<h2>Encoding</h2>\n<p>Document databases encode data in a standard format.  For MongoDB and my applications, I'll be using JSON to display data.  JSON is light weight, easy to read, and easy to use in JavaScript, so it's perfect for me.  Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>ObjectId<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rchillard\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"luggagecombination12345\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, this is a single document, but it sure looks a lot like an object in JavaScript.  That's because JSON stands for JavaScript Object Notation and the syntax is virtually identical.  I'm going to use document and object interchangeably from here on out.</p>\n<p>There's an important characteristic above, which is the _id property.  The _id property is unique to every object in the database and is how document-based databases work.</p>\n<h2>Associations</h2>\n<p>Once you understand and can implement a document, the topic of relating or associating individual documents to one another quickly comes up.  MongoDB supports a number of different assocations.  Associations are ways of linking different documents together.</p>\n<ul>\n<li>one  : one</li>\n<li>one  : many</li>\n<li>many : many</li>\n</ul>\n<p>And you can implement these associations by either embeding them or referencing them.</p>\n<h3>Embeded</h3>\n<blockquote>\n<p>Parent document: Object 1</p>\n<blockquote>\n<p>New document:   Object 2</p>\n</blockquote>\n</blockquote>\n<h3>References</h3>\n<blockquote>\n<p>Object 1</p>\n<blockquote>\n<p>[ Reference ID to Object 2 ]</p>\n</blockquote>\n</blockquote>\n<h2>Understanding Connections</h2>\n<p>Mongo (Database) --> Mongoose (Interface) --> Application (NodeJS)</p>\n<h1>MongoDB Commands</h1>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongod</td>\n<td>Runs the Mongo daemon</td>\n</tr>\n<tr>\n<td>mongo</td>\n<td>Opens up database shell</td>\n</tr>\n<tr>\n<td>show dbs</td>\n<td>Display the databases on the server</td>\n</tr>\n<tr>\n<td>use 'db'</td>\n<td>Create or use a database (switch to it)</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>find</td>\n<td>Read a database</td>\n</tr>\n<tr>\n<td>update</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>show collections</td>\n<td>display the collections in a database</td>\n</tr>\n</tbody>\n</table>\n<h2>Mongoose</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>matching criteria<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">do</span> something <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Return object from the database - hydrate data from the IDs - execute search with callback</span></code></pre></div>","timeToRead":2,"frontmatter":{"title":"Mongo like Candy","date":"Dec 01, 2018","tags":["learn","databases","non-relational","mongodb"]}}},"pageContext":{"slug":"/2018/12/01-mongo-like-candy/","prev":"/2018/11/30-non-relational-databases/","next":"/2018/12/02-mongoose-vs-candy/"}}