{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/11/10-install-firefox-developer-edition-using-bash/","webpackCompilationHash":"c3113005095ffe160bef","result":{"data":{"markdownRemark":{"html":"<p>Today, I'm going to run down a bash script for installing Firefox Developer Edition on Ubuntu 18.04+.  I found several blog posts already out there on how to do this, but none of them actually worked correctly when tested.  This post is for those that want a single bash script to:</p>\n<ul>\n<li>Download the latest version of Firefox Developer Edition</li>\n<li>Backup their previous version</li>\n<li>Create a desktop favorite</li>\n</ul>\n<p>For the anxious, here's the entire script up front.  I'll take you through it step by step afterward:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># Function to make messaging easier</span>\n<span class=\"token builtin class-name\">read</span> -r error success warning notify nocolor <span class=\"token operator\">&lt;&lt;&lt;</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;31m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;32m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;33m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;34m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token function-name function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token operator\">!</span>1}</span><span class=\"token variable\">$1</span>:<span class=\"token variable\">${nocolor}</span> <span class=\"token variable\">$2</span>\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Check for root privileges</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token environment constant\">$EUID</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  message notify <span class=\"token string\">\"Please assume root privileges\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Backup helper function</span>\ncheck-create-<span class=\"token function-name function\">backup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    message notify <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span> is not installed.\"</span>\n    <span class=\"token function\">mkdir</span> --verbose /opt/<span class=\"token variable\">$1</span>\n  <span class=\"token keyword\">else</span>\n    message notify <span class=\"token string\">\"Previous version of <span class=\"token variable\">$1</span> exists.  Deleting last backup and saving current version as backup.\"</span>\n    <span class=\"token function\">rm</span> --force --recursive /opt/<span class=\"token variable\">$1</span>-previous\n    <span class=\"token function\">mv</span> --verbose /opt/<span class=\"token variable\">$1</span> /opt/<span class=\"token variable\">$1</span>-previous\n    message success <span class=\"token string\">\"Old version backed up to /opt/<span class=\"token variable\">$1</span>-previous\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Check for ~/Downloads directory</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -d ~/Downloads <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  message notify <span class=\"token string\">\"~/Downloads exists, proceeding to save file there.\"</span>\n<span class=\"token keyword\">else</span>\n  message notify <span class=\"token string\">\"No Downloads folder exists yet, so creating one.\"</span>\n  <span class=\"token function\">mkdir</span> --verbose ~/Downloads\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Calculate current Firefox version and download URL</span>\n<span class=\"token assign-left variable\">firefox_json</span><span class=\"token operator\">=</span>https://product-details.mozilla.org/1.0/devedition.json\n<span class=\"token assign-left variable\">firefox_version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> --silent $firefox_json <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> <span class=\"token string\">\"version\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> --reverse --version-sort <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -1 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>\"<span class=\"token punctuation\">]</span> <span class=\"token string\">'{print <span class=\"token variable\">$4</span>}'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">firefox_file</span><span class=\"token operator\">=</span>firefox-<span class=\"token variable\">$firefox_version</span>.tar.bz2\nfirefox_url<span class=\"token operator\">=</span>https://download-installer.cdn.mozilla.net/pub/devedition/releases/<span class=\"token variable\">$firefox_version</span>/linux-x86_64/en-US/<span class=\"token variable\">$firefox_file</span>\n\n\nmessage notify <span class=\"token string\">\"Downloading Firefox Developer Edition <span class=\"token variable\">$firefox_version</span> from <span class=\"token variable\">$firefox_url</span>\"</span>\n<span class=\"token function\">curl</span> -o ~/Downloads/<span class=\"token variable\">$firefox_file</span> <span class=\"token variable\">$firefox_url</span>\n<span class=\"token assign-left variable\">exit_status</span><span class=\"token operator\">=</span><span class=\"token variable\">$?</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$exit_status</span> -ne <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token variable\">$exit_status</span>\n<span class=\"token keyword\">else</span>\n  check-create-backup firefox\n\n  message notify \"Extracting downloaded <span class=\"token variable\">$firefox_file</span><span class=\"token punctuation\">..</span>.<span class=\"token string\">\"\n  tar --extract --bzip2 --file ~/Downloads/<span class=\"token variable\">$firefox_file</span> --directory /opt\n\n  message notify \"</span>Creating symlink <span class=\"token keyword\">for</span> Firefox<span class=\"token string\">\"\n  ln --force --symbolic --verbose /opt/firefox/firefox /usr/local/bin/firefox\n\n  cp --verbose ./firefox-developer.desktop /usr/share/applications/\n  chmod +x /usr/share/applications/firefox-developer.desktop\n\n  message notify \"</span>Cleaning up downloaded files<span class=\"token punctuation\">..</span>.<span class=\"token string\">\"\n  rm --verbose ~/Downloads/<span class=\"token variable\">$firefox_file</span>\nfi\n\nmessage success \"</span>Firefox Developer Edition <span class=\"token variable\">$firefox_version</span> has been installed.<span class=\"token string\">\"\nmessage notify \"</span>To <span class=\"token function\">add</span> to your favorites, search, right click, and <span class=\"token keyword\">select</span> <span class=\"token string\">'Add to Favorites'</span>\"</code></pre></div>\n<h2>Helper Functions</h2>\n<p>If you're curious about the first half of this script, I invite you to read my last post on bash helper functions.  While it may seem a bit overwrought, helper functions make it easier to reason around bash's esoteric syntax and they make code more readable.  I'm sharing these functions here, so that everyone can see them in action.  They make the rest of the script easier to understand and write.</p>\n<h2>Determine Latest Version</h2>\n<p>Two of the hardest things about this script are:</p>\n<ol>\n<li>To determine the latest version, you have to parse data from a remote endpoint returning JSON</li>\n<li>To download the right file you then have to compose a URL from your version data</li>\n</ol>\n<p>Many of the existing examples I saw on the internet from other blogs <em>thought they were downloading the latest version</em>, but actually had scripts that would break in certain cases of semantic versioning.  This is due to how programs like sort return numbers appended to text.  Here's the magic:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> --silent $firefox_json <span class=\"token punctuation\">\\</span>\n                <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span> <span class=\"token punctuation\">\\</span>\n                <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> <span class=\"token string\">\"version\"</span> <span class=\"token punctuation\">\\</span>\n                <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> --reverse --version-sort <span class=\"token punctuation\">\\</span>\n                <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -1 <span class=\"token punctuation\">\\</span>\n                <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>\"<span class=\"token punctuation\">]</span> <span class=\"token string\">'{print <span class=\"token variable\">$4</span>}'</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p>Let's break it down:</p>\n<ul>\n<li>curl is a command line interface (cli) to make HTTP requests of remote urls</li>\n<li>jq is a program to format JSON data, which is important because Mozilla's API returns JSON</li>\n<li>egrep is a program that searches for text patterns using regular expressions</li>\n<li>sort is a program to take raw input and sort it into output as you specify</li>\n<li>head displays the first line of a file or input</li>\n<li>awk is used to find text and perform an action on it</li>\n</ul>\n<p>The | is a pipe operator, which stitches our command together by taking the output of one command and piping it into the next one.  With all this considered together, we're actually doing the following:</p>\n<ol>\n<li>Downloading the file (curl --silent $firefox_json)</li>\n<li>Reformatting it into JSON (jq .)</li>\n<li>Searching for and returning only the version fields (egrep \"version\")</li>\n<li>Sorting those fields in reverse order (sort --reverse, from newest to oldest) using a version algorithm (--version-sort, this was the key!)</li>\n<li>Taking the top version (the latest or newest one)</li>\n<li>Printing the 4th string separated by the \\ character (awk -F[\"] '{print $4}')</li>\n</ol>\n<p>After all of that work, we know the latest version of Firefox Developer Edition!</p>\n<h2>Download Latest Version</h2>\n<p>Now that we know the proper version we want, we take our research on how Mozilla distributes FireFox Developer Edition, and we make a few assumptions to construct a valid URL for the actual program.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">firefox_file</span><span class=\"token operator\">=</span>firefox-<span class=\"token variable\">$firefox_version</span>.tar.bz2\n<span class=\"token assign-left variable\">firefox_url</span><span class=\"token operator\">=</span>https://download-installer.cdn.mozilla.net/pub/devedition/releases/<span class=\"token variable\">$firefox_version</span>/linux-x86_64/en-US/<span class=\"token variable\">$firefox_file</span></code></pre></div>\n<p>In this case, we know Mozilla distributes this as a tarball using bzip2 compression, and that they make it available on their CDN at a predictable path for our operating system (linux), processor architecture (x86_64), and language (en-US).  Future versions of this script could detect the local environment and adjust the download URL accordingly.</p>\n<h2>Backup Previous Version</h2>\n<p>I posted about this yesterday, but it's extremely useful to build helper functions in bash, which you can reuse on many different projects.  In this case, I knew Firefox was one piece of software I wanted to automate installing, but also that there'd be many more programs later.  I took the time to write a helper function that can check on an existing pathway and then back up the files in that pathway before wiping them out:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">check-create-<span class=\"token function-name function\">backup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    message notify <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span> does not exist.  Creating directory at /opt/<span class=\"token variable\">$1</span>\"</span>\n    <span class=\"token function\">mkdir</span> --verbose /opt/<span class=\"token variable\">$1</span>\n  <span class=\"token keyword\">else</span>\n    message notify <span class=\"token string\">\"Previous version of <span class=\"token variable\">$1</span> exists.  Deleting last backup and saving current version as backup.\"</span>\n    <span class=\"token function\">rm</span> --force --recursive /opt/<span class=\"token variable\">$1</span>-previous\n    <span class=\"token function\">mv</span> --verbose /opt/<span class=\"token variable\">$1</span> /opt/<span class=\"token variable\">$1</span>-previous\n    message success <span class=\"token string\">\"Old version backed up to /opt/<span class=\"token variable\">$1</span>-previous\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I wanted to point out two things about this simple script:</p>\n<ol>\n<li>It's a good practice to use the spelled out flags in scripts (--verbose instead of -v), because they're easy to read.  Since it's a script, you don't need to be terse with your syntax.  You'll write it once and it will be read many times afterward.  You should optimize for the reading.  The computer doesn't care, but when a human is stopping to read it or troubleshoot a problem, then they will care, because it's easier to see what a command is doing without having to look up a manual page.</li>\n<li>I use absolute paths here so that the script never has to change directory.  This is on purpose, because changing the directory changes the context from where the user ran the script.  It's a best practice and expected that a script will not change the context you run it from. </li>\n</ol>\n<h1>Check for ~/Downloads directory</h1>\n<p>This is an even simpler example, but it's important to always check for the existence of a directory, <em>before</em> you try to place a file in that directory.  In this case, anyone using Ubuntu should have a ~/Downloads folder already, but for users who are not, this is a useful guard clause:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -d ~/Downloads <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  message notify <span class=\"token string\">\"~/Downloads exists, proceeding to save file there.\"</span>\n<span class=\"token keyword\">else</span>\n  message notify <span class=\"token string\">\"No ~/Downloads folder exists yet, so creating one.\"</span>\n  <span class=\"token function\">mkdir</span> --verbose ~/Downloads\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>The --verbose flag means the full result of a command is output, making it easier for the person running the script to see what is happening.</p>\n<h2>Create a Symbolic Link</h2>\n<p>A symbolic link is a special file that points to another file or directory.  If you come from a Windows background, then this is basically just a shortcut.  In the Linux world, a symbolic link or symlink is an alias for another file.  Why do we need one?</p>\n<p>For this script we are creating a symbolic link in a directory that exists as an executable path.  In other words, we're extracting our program files, then making a shortcut that will allow us to run our program while keeping our program files where we want them.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  message notify <span class=\"token string\">\"Extracting downloaded <span class=\"token variable\">$firefox_file</span>...\"</span>\n  <span class=\"token function\">tar</span> --extract --bzip2 --file ~/Downloads/<span class=\"token variable\">$firefox_file</span> --directory /opt\n\n  message notify <span class=\"token string\">\"Creating symlink for Firefox\"</span>\n  <span class=\"token function\">ln</span> --force --symbolic --verbose /opt/firefox/firefox /usr/local/bin/firefox</code></pre></div>\n<p>In this case, we're putting our files in the /opt directory, which stands for 'options' because it has traditionally been used as a place to install add-on software that did not come with the operating system.  This is exactly that.</p>\n<p>We're symbolic linking or creating a shortcut to the /usr/local/bin directory because this directory is for normal user programs which were built locally and are not a part of the operating system's packages.  We're installing this ourselves, without help of the package manager.</p>\n<h2>Copy a Desktop Setting</h2>\n<p>We want to be able to add our new Firefox program as a favorite, so it appears on our dock.  In order to do that, we need to copy a configuration file that tells Ubuntu what to call our program, where to run it from, how to run it, and what icon it should have, as well as more:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Save in file named firefox-developer.desktop</span>\n<span class=\"token punctuation\">[</span>Desktop Entry<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>Firefox Developer\n<span class=\"token assign-left variable\">GenericName</span><span class=\"token operator\">=</span>Firefox Developer Edition\n<span class=\"token assign-left variable\">Exec</span><span class=\"token operator\">=</span>/usr/local/bin/firefox\n<span class=\"token assign-left variable\">Terminal</span><span class=\"token operator\">=</span>false\n<span class=\"token assign-left variable\">Icon</span><span class=\"token operator\">=</span>/opt/firefox/browser/chrome/icons/default/default128.png\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>Application\n<span class=\"token assign-left variable\">Categories</span><span class=\"token operator\">=</span>Application<span class=\"token punctuation\">;</span>Network<span class=\"token punctuation\">;</span>X-Developer<span class=\"token punctuation\">;</span>\n<span class=\"token assign-left variable\">Comment</span><span class=\"token operator\">=</span>Firefox Developer Edition Web Browser</code></pre></div>\n<p>Once you've saved that file in the same directory as your script, you can see how this part works:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> --verbose ./firefox-developer.desktop /usr/share/applications/\n<span class=\"token function\">chmod</span> +x /usr/share/applications/firefox-developer.desktop</code></pre></div>\n<p>These two commands copy the file into its proper place and then make it executable.</p>\n<h2>Clean Up</h2>\n<p>We've done a lot with this script.  The final part removes the downloaded zip files to save disk space.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">message notify <span class=\"token string\">\"Cleaning up downloaded files...\"</span>\n<span class=\"token function\">rm</span> --verbose ~/Downloads/<span class=\"token variable\">$firefox_file</span></code></pre></div>\n<p>Even though it's only 70 or so lines of code, I'm really excited to share this with the world, because I think it will help address an issue in many different blog posts around getting the actual, real latest version.  In order to write this script, I had to learn a lot of different bash commands, new syntax, new programs, and what feels like the most valuable skill of all: how to parse a JSON API to get just the data I need.</p>\n<p>Keep on bashing on!</p>","timeToRead":8,"frontmatter":{"title":"How to Install Firefox Developer Edition using Bash","date":"November 10, 2019","tags":["productivity"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/11/10-install-firefox-developer-edition-using-bash/","prev":"/2019/11/09-bash-helper-scripts/","next":null}}}