{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/11/21-install-hashicorp-software-using-bash/","webpackCompilationHash":"c3113005095ffe160bef","result":{"data":{"markdownRemark":{"html":"<p>Building on my last post, I wanted to breakdown a similar bash script that will install a HashiCorp tool for you called Packer.  HashiCorp is an open source first company that produces tools that make managing cloud infrastructure easier.  They also distribute those tools as stand alone binary files, which are completely portable.  Packer is one of their tools that will allow you to easily build machine images in a reproducible way.  This is important for running immutable infrastructure in the cloud, because you want to be able to easily build freshly patched images and run your hosts using them. </p>\n<p>This post isn't about cloud infrastructure though.  This is about simple bash scripts to download binary files from presupposed places on the interwebz. :)</p>\n<p>Here's the whole script:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># Color in command line messaging function</span>\n<span class=\"token builtin class-name\">read</span> -r error success warning notify nocolor <span class=\"token operator\">&lt;&lt;&lt;</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;31m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;32m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;33m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[1;34m\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token function-name function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token operator\">!</span>1}</span><span class=\"token variable\">$1</span>:<span class=\"token variable\">${nocolor}</span> <span class=\"token variable\">$2</span>\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Check for root privileges</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token environment constant\">$EUID</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  message notify <span class=\"token string\">\"Please assume root privileges\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Backup helper function</span>\ncheck-create-<span class=\"token function-name function\">backup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    message notify <span class=\"token string\">\"/opt/<span class=\"token variable\">$1</span> is not installed.\"</span>\n    <span class=\"token function\">mkdir</span> -v /opt/<span class=\"token variable\">$1</span>\n  <span class=\"token keyword\">else</span>\n    message notify <span class=\"token string\">\"Previous version of <span class=\"token variable\">$1</span> exists.  Deleting last backup and saving current version as backup.\"</span>\n    <span class=\"token function\">rm</span> -rfv /opt/<span class=\"token variable\">$1</span>-previous\n    <span class=\"token function\">mv</span> -v /opt/<span class=\"token variable\">$1</span> /opt/<span class=\"token variable\">$1</span>-previous\n    message success <span class=\"token string\">\"Old version backed up to /opt/<span class=\"token variable\">$1</span>-previous\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"~/Downloads\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  message notify <span class=\"token string\">\"No Downloads folder exists yet, so creating one.\"</span>\n  <span class=\"token function\">mkdir</span> -v ~/Downloads\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Determine Packer actual URL and then download the actual package to ~/Downloads</span>\nmessage notify <span class=\"token string\">\"Installing Packer\"</span>\n<span class=\"token assign-left variable\">packer_url</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> --silent https://releases.hashicorp.com/index.json <span class=\"token operator\">|</span> jq <span class=\"token string\">'{packer}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> <span class=\"token string\">\"linux_amd64\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -rV <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -1 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>\"<span class=\"token punctuation\">]</span> <span class=\"token string\">'{print <span class=\"token variable\">$4</span>}'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token function\">curl</span> -o ~/Downloads/packer-latest <span class=\"token variable\">$packer_url</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$exit_status</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token variable\">$exit_status</span>\n<span class=\"token keyword\">else</span>\n  check-create-backup packer\n\n  <span class=\"token function\">unzip</span> ~/Downloads/packer-latest -d /opt/packer\n  <span class=\"token function\">chmod</span> +x /opt/packer/packer\n\n  message notify <span class=\"token string\">\"Creating symlink from /opt to /usr/local/bin\"</span>\n  <span class=\"token function\">ln</span> -s /opt/packer/packer /usr/local/bin/packer\n\n  message notify \"Cleaning up downloaded files<span class=\"token punctuation\">..</span>.<span class=\"token string\">\"\n  rm -v ~/Downloads/packer-latest\n\n  message success \"</span>Packer should be installed now.  Type <span class=\"token string\">'packer'</span> to test.\"\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>I won't take the time to rehash the bash helper functions in the previous post, which appear here again, except to highlight their value.  Taking the work from our last script to download Firefox and reusing it, the actual new code needed to write this is minimal (~20 lines).  It's mostly a task of figuring out how to calculate the version information and how to calculate the URL to download the binary file from.</p>\n<p>Let's break it down.  Calculating the URL where we can download Packer from:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">packer_url</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> --silent https://releases.hashicorp.com/index.json <span class=\"token punctuation\">\\</span>\n                            <span class=\"token operator\">|</span> jq <span class=\"token string\">'{packer}'</span> <span class=\"token punctuation\">\\</span>\n                            <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> <span class=\"token string\">\"linux_amd64\"</span> <span class=\"token punctuation\">\\</span>\n                            <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -rV <span class=\"token punctuation\">\\</span>\n                            <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -1 <span class=\"token punctuation\">\\</span>\n                            <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token punctuation\">[</span><span class=\"token punctuation\">\\</span>\"<span class=\"token punctuation\">]</span> <span class=\"token string\">'{print <span class=\"token variable\">$4</span>}'</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p>Lucky for us, HashiCorp provides a single API for all of their release information, which can be found at releases.hashicorp.com and neatly comes in JSON format.  We're using the pipe | operator here heavily to drill down into the JSON data and figure out what applies to us:</p>\n<ul>\n<li>jq formats into JSON, while filtering for the name 'packer'</li>\n<li>egrep to search the text output for our operating system, our architecture 'linux_amd64'</li>\n<li>sort -rV is the key here, because we're using a reverse sorting algorithm to navigate versions</li>\n<li>head -1 takes the top version (or latest one)</li>\n<li>Finally, printing the 4th string (actual version/URL) separated by the \\ character (awk -F[\"] '{print $4}')</li>\n</ul>\n<p>Let's finish up by reviewing how and where we install Packer:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o ~/Downloads/packer-latest <span class=\"token variable\">$packer_url</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$exit_status</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token variable\">$exit_status</span>\n<span class=\"token keyword\">else</span>\n  check-create-backup packer\n\n  <span class=\"token function\">unzip</span> ~/Downloads/packer-latest -d /opt/packer\n  <span class=\"token function\">chmod</span> +x /opt/packer/packer\n\n  message notify <span class=\"token string\">\"Creating symlink from /opt to /usr/local/bin\"</span>\n  <span class=\"token function\">ln</span> -s /opt/packer/packer /usr/local/bin/packer\n\n  message notify <span class=\"token string\">\"Cleaning up downloaded files...\"</span>\n  <span class=\"token function\">rm</span> -v ~/Downloads/packer-latest\n\n  message success <span class=\"token string\">\"Packer should be installed now.  Type 'packer' to test.\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>With the URL known, we download the zip file to our ~/Downloads directory.  After that, it's just a matter of unzipping, making the binary executable with chmod, then creating a symlink to an executable path, so that the binary itself can be run from the command line.  After that, we clean up our downloaded zip file to save on disk space.</p>\n<p>Today we went through how to download a binary file distributed as a zip from a provider that publishes a version API, and then how to install it in a way that is managed and easy to replace in the future.  I hope this helps you write your own bash scripts to accomplish much the same.  Hopefully you're starting to see the incredible strength of having a few helper bash functions that you can leverage for many different applications. </p>\n<p>Keep on bashing on!</p>","timeToRead":3,"frontmatter":{"title":"How to Install HashiCorp Packer using Bash","date":"November 21, 2019","tags":["productivity"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/11/21-install-hashicorp-software-using-bash/","prev":"/2019/11/10-install-firefox-developer-edition-using-bash/","next":null}}}